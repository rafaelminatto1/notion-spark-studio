#!/usr/bin/env node

/**
 * Script de verifica√ß√£o de ambiente otimizado para Vercel
 * Valida configura√ß√µes cr√≠ticas para deploy em produ√ß√£o
 */

// Vari√°veis obrigat√≥rias para Vercel
const REQUIRED_VERCEL_VARS = [
  'NODE_ENV'
];

// Vari√°veis opcionais da Vercel (dispon√≠veis automaticamente)
const OPTIONAL_VERCEL_VARS = [
  'VERCEL_ENV',
  'VERCEL_URL',
  'VERCEL_GIT_COMMIT_SHA',
  'VERCEL_GIT_COMMIT_MESSAGE',
  'VERCEL_GIT_COMMIT_AUTHOR_NAME',
  'VERCEL_GIT_REPO_SLUG'
];

// Vari√°veis do projeto (se definidas)
const PROJECT_VARS = [
  'VITE_APP_NAME',
  'VITE_APP_VERSION',
  'VITE_API_BASE_URL',
  'VITE_WS_URL',
  'VITE_SUPABASE_URL',
  'VITE_SUPABASE_ANON_KEY'
];

const vercelEnv = process.env.VERCEL_ENV || 'unknown';
const nodeEnv = process.env.NODE_ENV || 'unknown';

console.log('üîç Verifica√ß√£o de Ambiente - Vercel Optimized');
console.log('=============================================');

// Status do ambiente
function getEnvironmentStatus() {
  console.log('\nüìã Status do Ambiente:');
  console.log(`üìù NODE_ENV: ${nodeEnv}`);
  console.log(`üåê VERCEL_ENV: ${vercelEnv}`);
  
  if (process.env.VERCEL_URL) {
    console.log(`üìù URL: ${process.env.VERCEL_URL}`);
  }
  
  if (process.env.VERCEL_GIT_COMMIT_SHA) {
    console.log(`üîó Commit: ${process.env.VERCEL_GIT_COMMIT_SHA.substring(0, 8)}`);
  }
  
  console.log(`‚è∞ Timestamp: ${new Date().toISOString()}`);
}

// Verificar vari√°veis obrigat√≥rias
function checkRequiredVars() {
  console.log('\n‚úÖ Vari√°veis Obrigat√≥rias:');
  
  const missing = [];
  
  REQUIRED_VERCEL_VARS.forEach(varName => {
    if (process.env[varName]) {
      console.log(`‚úÖ ${varName}: Definida`);
    } else {
      console.log(`‚ùå ${varName}: AUSENTE`);
      missing.push(varName);
    }
  });
  
  return missing;
}

// Verificar vari√°veis da Vercel
function checkVercelVars() {
  console.log('\nüöÄ Vari√°veis da Vercel:');
  
  if (process.env.VERCEL_ENV) {
    console.log(`‚úÖ Ambiente Vercel: ${process.env.VERCEL_ENV}`);
  } else {
    console.log(`‚ÑπÔ∏è  VERCEL_ENV: N√£o detectado (esperado localmente)`);
  }
  
  if (process.env.VERCEL_GIT_COMMIT_SHA) {
    console.log(`‚úÖ Commit: ${process.env.VERCEL_GIT_COMMIT_SHA.substring(0, 8)}`);
  } else {
    console.log(`‚ÑπÔ∏è  VERCEL_GIT_COMMIT_SHA: N√£o dispon√≠vel`);
  }
  
  if (process.env.VERCEL_URL) {
    console.log(`‚úÖ URL: ${process.env.VERCEL_URL}`);
  } else {
    console.log(`‚ÑπÔ∏è  VERCEL_URL: N√£o dispon√≠vel`);
  }
}

// Verificar vari√°veis do projeto
function checkProjectVars() {
  console.log('\nüéØ Vari√°veis do Projeto:');
  
  const defined = [];
  const undefined = [];
  
  PROJECT_VARS.forEach(varName => {
    if (process.env[varName]) {
      console.log(`‚úÖ ${varName}: ${process.env[varName]}`);
      defined.push(varName);
    } else {
      console.log(`‚ÑπÔ∏è  ${varName}: Usando fallback`);
      undefined.push(varName);
    }
  });
  
  return { defined, undefined };
}

// Verificar configura√ß√£o de build
function checkBuildConfig() {
  console.log('\nüèóÔ∏è  Configura√ß√£o de Build:');
  
  // Next.js
  console.log(`‚úÖ Framework: Next.js`);
  console.log(`‚úÖ TypeScript: Habilitado`);
  console.log(`‚úÖ ESLint: Habilitado`);
  
  // Scripts
  const packageJson = require('../package.json');
  const scripts = packageJson.scripts || {};
  
  if (scripts.build) {
    console.log(`‚úÖ Build script: ${scripts.build}`);
  }
  
  if (scripts['vercel-build']) {
    console.log(`‚úÖ Vercel build: ${scripts['vercel-build']}`);
  }
  
  if (scripts.lint) {
    console.log(`‚úÖ Lint script: ${scripts.lint}`);
  }
}

// Verificar depend√™ncias cr√≠ticas
function checkDependencies() {
  console.log('\nüì¶ Depend√™ncias Cr√≠ticas:');
  
  const packageJson = require('../package.json');
  const deps = packageJson.dependencies || {};
  
  const criticalDeps = [
    'next',
    'react',
    'react-dom',
    '@supabase/supabase-js',
    '@tanstack/react-query'
  ];
  
  criticalDeps.forEach(dep => {
    if (deps[dep]) {
      console.log(`‚úÖ ${dep}: ${deps[dep]}`);
    } else {
      console.log(`‚ùå ${dep}: AUSENTE`);
    }
  });
}

// Validar configura√ß√£o Vercel
function validateVercelConfig() {
  console.log('\n‚öôÔ∏è  Configura√ß√£o Vercel:');
  
  try {
    const vercelJson = require('../vercel.json');
    
    console.log(`‚úÖ vercel.json: Encontrado`);
    console.log(`‚úÖ Framework: ${vercelJson.framework || 'nextjs'}`);
    console.log(`‚úÖ Regions: ${JSON.stringify(vercelJson.regions || ['iad1'])}`);
    
    if (vercelJson.functions) {
      console.log(`‚úÖ Functions: Configuradas`);
    }
    
    if (vercelJson.headers) {
      console.log(`‚úÖ Headers: ${vercelJson.headers.length} configurados`);
    }
    
  } catch (error) {
    console.log(`‚ùå vercel.json: ${error.message}`);
  }
}

// Executar verifica√ß√µes
function main() {
  try {
    getEnvironmentStatus();
    
    const missingRequired = checkRequiredVars();
    checkVercelVars();
    const projectVars = checkProjectVars();
    checkBuildConfig();
    checkDependencies();
    validateVercelConfig();
    
    // Resumo final
    console.log('\nüéØ Resumo da Verifica√ß√£o:');
    console.log('========================');
    
    if (missingRequired.length === 0) {
      console.log('‚úÖ Todas as vari√°veis obrigat√≥rias est√£o definidas');
    } else {
      console.log(`‚ùå ${missingRequired.length} vari√°veis obrigat√≥rias ausentes: ${missingRequired.join(', ')}`);
    }
    
    console.log(`‚ÑπÔ∏è  ${projectVars.defined.length}/${PROJECT_VARS.length} vari√°veis do projeto definidas`);
    console.log(`üåê Ambiente: ${nodeEnv} (Vercel: ${vercelEnv})`);
    
    if (vercelEnv === 'production') {
      console.log('üöÄ Status: PRONTO PARA PRODU√á√ÉO');
    } else {
      console.log('üîß Status: Ambiente de desenvolvimento/preview');
    }
    
    // Exit code
    if (missingRequired.length > 0) {
      console.log('\n‚ùå Verifica√ß√£o falhou devido a vari√°veis ausentes');
      process.exit(1);
    } else {
      console.log('\n‚úÖ Verifica√ß√£o conclu√≠da com sucesso');
      process.exit(0);
    }
    
  } catch (error) {
    console.error('\nüí• Erro durante a verifica√ß√£o:');
    console.error(error.message);
    process.exit(1);
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  main,
  checkRequiredVars,
  checkVercelVars,
  checkProjectVars
}; 